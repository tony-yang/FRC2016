// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
std::shared_ptr<CANTalon> RobotMap::drivetrainLeftFrontMotor;
std::shared_ptr<CANTalon> RobotMap::drivetrainLeftRearMotor;
std::shared_ptr<CANTalon> RobotMap::drivetrainRightFrontMotor;
std::shared_ptr<CANTalon> RobotMap::drivetrainRightRearMotor;
std::shared_ptr<RobotDrive> RobotMap::drivetrainRobotDrive41;
std::shared_ptr<Solenoid> RobotMap::drivetrainLeftMotorSolenoid;
std::shared_ptr<Solenoid> RobotMap::drivetrainRightMotorSolenoid;
std::shared_ptr<SpeedController> RobotMap::scalingMotor;
std::shared_ptr<AnalogPotentiometer> RobotMap::scalingPotentiometer;
std::shared_ptr<DigitalInput> RobotMap::ballManipulationBottomLimitSwitch;
std::shared_ptr<CANTalon> RobotMap::ballManipulationPivotMotor;
std::shared_ptr<CANTalon> RobotMap::ballManipulationFetchMotor;
std::shared_ptr<RobotDrive> RobotMap::ballManipulationBallMotor21;
std::shared_ptr<DigitalInput> RobotMap::ballManipulationTopLimitSwitch;
std::shared_ptr<Encoder> RobotMap::ballManipulationPivotEncoder;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION

void RobotMap::init() {
	printf("Running RobotMap init\n");

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    LiveWindow *lw = LiveWindow::GetInstance();

    drivetrainLeftFrontMotor.reset(new CANTalon(3));
    lw->AddActuator("Drivetrain", "LeftFrontMotor", drivetrainLeftFrontMotor);
    
    drivetrainLeftRearMotor.reset(new CANTalon(2));
    lw->AddActuator("Drivetrain", "LeftRearMotor", drivetrainLeftRearMotor);
    
    drivetrainRightFrontMotor.reset(new CANTalon(4));
    lw->AddActuator("Drivetrain", "RightFrontMotor", drivetrainRightFrontMotor);
    
    drivetrainRightRearMotor.reset(new CANTalon(1));
    lw->AddActuator("Drivetrain", "RightRearMotor", drivetrainRightRearMotor);
    
    drivetrainRobotDrive41.reset(new RobotDrive(drivetrainLeftFrontMotor, drivetrainLeftRearMotor,
              drivetrainRightFrontMotor, drivetrainRightRearMotor));
    
    drivetrainRobotDrive41->SetSafetyEnabled(true);
        drivetrainRobotDrive41->SetExpiration(0.1);
        drivetrainRobotDrive41->SetSensitivity(0.5);
        drivetrainRobotDrive41->SetMaxOutput(0.99);

    drivetrainLeftMotorSolenoid.reset(new Solenoid(5, 0));
    lw->AddActuator("Drivetrain", "LeftMotorSolenoid", drivetrainLeftMotorSolenoid);
    
    drivetrainRightMotorSolenoid.reset(new Solenoid(5, 1));
    lw->AddActuator("Drivetrain", "RightMotorSolenoid", drivetrainRightMotorSolenoid);
    
    scalingMotor.reset(new Talon(3));
    lw->AddActuator("Scaling", "Motor", std::static_pointer_cast<Talon>(scalingMotor));
    
    scalingPotentiometer.reset(new AnalogPotentiometer(0, 1.0, 0.0));
    lw->AddSensor("Scaling", "Potentiometer", scalingPotentiometer);
    
    ballManipulationBottomLimitSwitch.reset(new DigitalInput(5));
    lw->AddSensor("BallManipulation", "BottomLimitSwitch", ballManipulationBottomLimitSwitch);
    
    ballManipulationPivotMotor.reset(new CANTalon(10));
    lw->AddActuator("BallManipulation", "PivotMotor", ballManipulationPivotMotor);
    
    ballManipulationFetchMotor.reset(new CANTalon(11));
    lw->AddActuator("BallManipulation", "FetchMotor", ballManipulationFetchMotor);
    
    ballManipulationBallMotor21.reset(new RobotDrive(ballManipulationPivotMotor, ballManipulationFetchMotor));
    
    ballManipulationBallMotor21->SetSafetyEnabled(true);
        ballManipulationBallMotor21->SetExpiration(0.1);
        ballManipulationBallMotor21->SetSensitivity(0.5);
        ballManipulationBallMotor21->SetMaxOutput(0.99);

    ballManipulationTopLimitSwitch.reset(new DigitalInput(4));
    lw->AddSensor("BallManipulation", "TopLimitSwitch", ballManipulationTopLimitSwitch);
    
    ballManipulationPivotEncoder.reset(new Encoder(0, 1, false, Encoder::k4X));
    lw->AddSensor("BallManipulation", "PivotEncoder", ballManipulationPivotEncoder);
    ballManipulationPivotEncoder->SetDistancePerPulse(1.0);
    ballManipulationPivotEncoder->SetPIDSourceType(PIDSourceType::kRate);


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
}
